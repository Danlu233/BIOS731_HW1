labeller = labeller(epsilon_dist = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Bias of estimated beta")
p
p = ggplot(dat_bias, aes(x = factor(n), y = beta_bias)) + geom_col() +
facet_grid(rows = vars(true_beta), cols = vars(epsilon_dist),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Bias of estimated beta")
p
png(here::here("result","figure_for_bias.png"))
png(here::here("results","figure_for_bias.png"))
p
dev.off()
p = ggplot(dat_bias, aes(x = factor(n), y = beta_bias)) + geom_col() +
facet_grid(rows = vars(true_beta), cols = vars(epsilon_dist),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Bias of estimated beta") +
theme_minimal(base_size = 22)
p
p = ggplot(dat_bias, aes(x = factor(n), y = beta_bias)) + geom_col() +
facet_grid(rows = vars(true_beta), cols = vars(epsilon_dist),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Bias of estimated beta") +
theme(text = element_text(22))
p
p = ggplot(dat_bias, aes(x = factor(n), y = beta_bias)) + geom_col() +
facet_grid(rows = vars(true_beta), cols = vars(epsilon_dist),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
png(here::here("results","figure_for_bias.png"))
p
dev.off()
p = ggplot(dat_bias, aes(x = factor(n), y = beta_bias)) + geom_col() +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
png(here::here("results","figure_for_bias.png"))
p
dev.off()
png(here::here("results","figure_for_bias.png"), width = 720, height = 540)
p
dev.off()
# coverage of beta hat
dat_coverage = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage_wald = mean(coverage_wald),
coverage_p = mean(coverage_p),
coverage_t = mean(coverage_t))
dat_coverage_w = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage_wald = mean(coverage_wald)) %>% mutate(method = "Wald confidence intervals")
dat_coverage_w = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage_wald = mean(coverage_wald)) %>% mutate(method = "Wald confidence intervals")
dat_coverage_p = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage_p = mean(coverage_p)) %>% mutate(method = "bootstrap percentile intervals")
dat_coverage_t = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage_t = mean(coverage_t)) %>% mutate(method = "bootstrap t intervals")
dat_coverage = rbind(dat_coverage_w, dat_coverage_p, dat_coverage_t)
dat_coverage_w = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage = mean(coverage_wald)) %>% mutate(method = "Wald confidence intervals")
dat_coverage_p = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage = mean(coverage_p)) %>% mutate(method = "bootstrap percentile intervals")
dat_coverage_t = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage = mean(coverage_t)) %>% mutate(method = "bootstrap t intervals")
dat_coverage = rbind(dat_coverage_w, dat_coverage_p, dat_coverage_t)
View(dat_coverage)
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col() +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
p
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_bar() +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
p
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = 2, lty = "dashed")
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = 2, lty = "dashed") +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 22))
p
dat_coverage$method = factor(dat_coverage$method,
levels = c("Wald confidence intervals",
"bootstrap percentile intervals",
"bootstrap t intervals"))
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = 2, lty = "dashed") +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 22))
png(here::here("results","figure_for_coverage.png"), width = 720, height = 540)
p
dev.off()
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = 2, lty = "dashed") +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 22), legend.position = "bottom")
png(here::here("results","figure_for_coverage.png"), width = 720, height = 540)
p
dev.off()
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = 2, lty = "dashed") +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 20), legend.position = "bottom")
png(here::here("results","figure_for_coverage.png"), width = 720, height = 540)
p
dev.off()
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = 2, lty = "dashed") +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 20), legend.position = "bottom") +
scale_fill_grey(start = 0.2, end = 0.8)
p
png(here::here("results","figure_for_coverage.png"), width = 720, height = 540)
p
dev.off()
dat_coverage_w = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage = mean(coverage_wald), time = mean(time_wald)) %>% mutate(method = "Wald confidence intervals")
dat_coverage_p = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage = mean(coverage_p), time = mean(time_p)) %>% mutate(method = "bootstrap percentile intervals")
dat_coverage_t = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage = mean(coverage_t), time = mean(time_t)) %>% mutate(method = "bootstrap t intervals")
dat_coverage = rbind(dat_coverage_w, dat_coverage_p, dat_coverage_t)
dat_coverage$method = factor(dat_coverage$method,
levels = c("Wald confidence intervals",
"bootstrap percentile intervals",
"bootstrap t intervals"))
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = 2, lty = "dashed") +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 20), legend.position = "bottom") +
scale_fill_grey(start = 0.2, end = 0.8)
p
# computation time
p = ggplot(dat_coverage, aes(x = factor(n), y = time, fill= method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = 2, lty = "dashed") +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 20), legend.position = "bottom") +
scale_fill_grey(start = 0.2, end = 0.8)
p
# computation time
dat_time_w = all_results %>% group_by(n) %>%
summarise(time = mean(time_wald)) %>% mutate(method = "Wald confidence intervals")
dat_time_p = all_results %>% group_by(n) %>%
summarise(time = mean(time_p)) %>% mutate(method = "bootstrap percentile intervals")
dat_time_t = all_results %>% group_by(n) %>%
summarise(time = mean(time_t)) %>% mutate(method = "bootstrap t intervals")
dat_time = rbind(dat_time_w, dat_time_p, dat_coverage_t)
dat_time$method = factor(dat_time$method,
levels = c("Wald confidence intervals",
"bootstrap percentile intervals",
"bootstrap t intervals"))
# computation time
dat_time_w = all_results %>% group_by(n) %>%
summarise(time = mean(time_wald)) %>% mutate(method = "Wald confidence intervals")
dat_time_p = all_results %>% group_by(n) %>%
summarise(time = mean(time_p)) %>% mutate(method = "bootstrap percentile intervals")
dat_time_t = all_results %>% group_by(n) %>%
summarise(time = mean(time_t)) %>% mutate(method = "bootstrap t intervals")
dat_time = rbind(dat_time_w, dat_time_p, dat_coverage_t)
dat_time = rbind(dat_time_w, dat_time_p, dat_time_t)
dat_time$method = factor(dat_time$method,
levels = c("Wald confidence intervals",
"bootstrap percentile intervals",
"bootstrap t intervals"))
View(dat_time)
write.csv(dat_time, here::here("results","cimputation_time.csv"), row.names = F)
# distribution of se
p = ggplot(all_results, aes(x = std.error, color = factor(n))) +
geom_density(size = 1.2) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Standard Error", y = "Density", color = "Sample Size (n)") +
theme(text = element_text(size = 20), legend.position = "bottom") +
scale_fill_grey(start = 0.2, end = 0.8)
# distribution of se
p = ggplot(all_results, aes(x = std.error, color = factor(n))) +
geom_density(linewidth = 1.2) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Standard Error", y = "Density", color = "Sample Size (n)") +
theme(text = element_text(size = 20), legend.position = "bottom") +
scale_fill_grey(start = 0.2, end = 0.8)
p
# distribution of se
p = ggplot(all_results, aes(x = std.error, color = factor(n))) +
geom_density(linewidth = 1.2) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Standard Error", y = "Density", color = "Sample Size (n)") +
theme(text = element_text(size = 20), legend.position = "bottom") +
scale_color_grey(start = 0.2, end = 0.8)
p
# distribution of se
p = ggplot(all_results, aes(x = std.error, fill = factor(n))) +
geom_density(linewidth = 1.2) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Standard Error", y = "Density", color = "Sample Size (n)") +
theme(text = element_text(size = 20), legend.position = "bottom") +
scale_color_grey(start = 0.2, end = 0.8)
# distribution of se
p = ggplot(all_results, aes(x = std.error, fill = factor(n))) +
geom_density(linewidth = 1.2) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Standard Error", y = "Density", fill = "Sample Size (n)") +
theme(text = element_text(size = 20), legend.position = "bottom") +
scale_fill_grey(start = 0.2, end = 0.8)
p
# distribution of se
p = ggplot(all_results, aes(x = std.error, fill = factor(n))) +
geom_density(linewidth = 1.2) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Standard Error", y = "Density", fill = "Sample Size (n)") +
theme(text = element_text(size = 20), legend.position = "bottom")
p
# distribution of se
p = ggplot(all_results, aes(x = std.error, color = factor(n))) +
geom_density(linewidth = 1.2) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Standard Error", y = "Density", color = "Sample Size (n)") +
theme(text = element_text(size = 20), legend.position = "bottom")
p
# distribution of se
p = ggplot(all_results, aes(x = std.error, color = factor(n))) +
geom_density(linewidth = 1) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Standard Error", y = "Density", color = "Sample Size (n)") +
theme(text = element_text(size = 20), legend.position = "bottom")
p
png(here::here("results","figure_for_se.png"), width = 720, height = 540)
p
dev.off()
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge", alpha = 0.7) +
geom_hline(yintercept = 0.95, color = 2, lty = "dashed") +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 20), legend.position = "bottom")
p
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge", alpha = 0.8) +
geom_hline(yintercept = 0.95, color = 2, lty = "dashed") +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 20), legend.position = "bottom")
p
png(here::here("results","figure_for_coverage.png"), width = 720, height = 540)
p
dev.off()
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge", alpha = 0.8) +
geom_hline(yintercept = 0.95, color = 2, lty = "dashed", linewidth = 1.2) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 20), legend.position = "bottom")
p
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge", alpha = 0.8) +
geom_hline(yintercept = 0.95, color = 2, lty = "dashed", linewidth = 1) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 20), legend.position = "bottom")
p
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge", alpha = 0.8) +
geom_hline(yintercept = 0.95, color = 1, lty = "dashed", linewidth = 1) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 20), legend.position = "bottom")
p
png(here::here("results","figure_for_coverage.png"), width = 720, height = 540)
p
dev.off()
?rlnorm
####################
# simulate data
simdata = simulate_data(n = params$n,
true_beta = params$beta_true,
dist_epsilon = params$epsilon_dist)
params = param_grid[s,]
set.seed(seed[s])
sub_seed = floor(runif(nsim, 1, 10000))
set.seed(sub_seed[i])
####################
# simulate data
simdata = simulate_data(n = params$n,
true_beta = params$beta_true,
dist_epsilon = params$epsilon_dist)
param_grid = expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
epsilon_dist = epsilon_dist,
stringsAsFactors = F)
params = param_grid[s,]
View(param_grid)
s = 12
####################
# simulate data
simdata = simulate_data(n = params$n,
true_beta = params$beta_true,
dist_epsilon = params$epsilon_dist)
hist(y)
hist(simdata$y)
s = 13
####################
# simulate data
simdata = simulate_data(n = params$n,
true_beta = params$beta_true,
dist_epsilon = params$epsilon_dist)
params = param_grid[s,]
####################
# simulate data
simdata = simulate_data(n = params$n,
true_beta = params$beta_true,
dist_epsilon = params$epsilon_dist)
s=12
params = param_grid[s,]
set.seed(seed[s])
sub_seed = floor(runif(nsim, 1, 10000))
set.seed(sub_seed[i])
####################
# simulate data
simdata = simulate_data(n = params$n,
true_beta = params$beta_true,
dist_epsilon = params$epsilon_dist)
hist(simdata$y)
s=1
params = param_grid[s,]
####################
# simulate data
simdata = simulate_data(n = params$n,
true_beta = params$beta_true,
dist_epsilon = params$epsilon_dist)
hist(simdata$y)
library(tidyverse)
library(doParallel)
source(here::here("source", "01_simulate_data.R"))
source(here::here("source", "02_apply_method.R"))
source(here::here("source", "03_extract_estimates.R"))
source(here::here("source", "04_nonparametric_boot_percentile_ci.R"))
source(here::here("source", "05_nonparametric_boot_t_ci.R"))
#number of simulations
nsim = (.95*(1-.95))/(.01^2)
nboot = 120
nboot_t = 60
alpha = 0.05
n = c(10, 50, 500)
beta_true = c(0, 0.5, 2)
epsilon_dist = c("normal", "lognormal")
param_grid = expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
epsilon_dist = epsilon_dist,
stringsAsFactors = F)
# Set up parallel backend with 6 cores
num_cores = detectCores() - 2
cl = makeCluster(num_cores)
registerDoParallel(cl)
# generate a random seed for each simulated dataset
set.seed(111)
seed = floor(runif(nrow(param_grid), 1, 10000))
foreach(s = 1:nrow(param_grid), .packages = c("tidyverse", "broom")) %dopar% {
params = param_grid[s,]
set.seed(seed[s])
sub_seed = floor(runif(nsim, 1, 10000))
results = as.list(rep(NA, nsim))
for(i in 1:nsim){
tryCatch({
set.seed(sub_seed[i])
####################
# simulate data
simdata = simulate_data(n = params$n,
true_beta = params$beta_true,
dist_epsilon = params$epsilon_dist)
###################
# apply method(s)
fit = fit_model(simdata)
# calculate estimates and Wald CI
estimates = get_estimates(model_fit = fit,
true_beta = params$beta_true)
# calculate nonparametric bootstrap percentile interval
boot_percentile = nonpara_boot_percentile(simdata = simdata,
nboot = nboot,
size = params$n,
true_beta = params$beta_true,
alpha = alpha)
# calculate nonparametric bootstrap t interval
boot_t = nonpara_boot_t(simdata = simdata,
nboot = nboot,
nboot_t = nboot_t,
size = params$n,
true_beta = params$beta_true,
alpha = alpha)
# store results
estimates = estimates %>%
mutate(coverage_p = boot_percentile$coverage,
time_p = boot_percentile$time,
coverage_t = boot_t$coverage,
time_t = boot_t$time,
true_beta = params$beta_true,
n = params$n,
epsilon_dist = params$epsilon_dist)
results[[i]] = estimates
})
}
####################
# save results
filename = paste0("scenario_", s, ".RDA")
save(results,
file = here::here("data", filename))
}
stopImplicitCluster()
library(tidyverse)
library(ggplot2)
rda_files <- list.files(here::here("data"), pattern = "\\.RDA$", full.names = TRUE)
library(tidyverse)
library(ggplot2)
rda_files <- list.files(here::here("data"), pattern = "\\.RDA$", full.names = TRUE)
all_results = NA
for (i in 1:length(rda_files)) {
load(rda_files[i])
tmp = bind_rows(results)
all_results = rbind(all_results, tmp)
}
all_results = na.omit(all_results)
dat_bias = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(beta_hat = mean(beta_hat)) %>%
mutate(beta_bias = beta_hat - true_beta)
p = ggplot(dat_bias, aes(x = factor(n), y = beta_bias)) + geom_col() +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
p
View(dat_bias)
png(here::here("results","figure_for_bias.png"), width = 720, height = 540)
p
dev.off()
dat_coverage_w = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage = mean(coverage_wald)) %>% mutate(method = "Wald confidence intervals")
dat_coverage_p = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage = mean(coverage_p)) %>% mutate(method = "bootstrap percentile intervals")
dat_coverage_t = all_results %>% group_by(true_beta, epsilon_dist, n) %>%
summarise(coverage = mean(coverage_t)) %>% mutate(method = "bootstrap t intervals")
dat_coverage = rbind(dat_coverage_w, dat_coverage_p, dat_coverage_t)
dat_coverage$method = factor(dat_coverage$method,
levels = c("Wald confidence intervals",
"bootstrap percentile intervals",
"bootstrap t intervals"))
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge", alpha = 0.8) +
geom_hline(yintercept = 0.95, color = 1, lty = "dashed", linewidth = 1) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 20), legend.position = "bottom")
p
View(dat_bias)
png(here::here("results","figure_for_coverage.png"), width = 720, height = 540)
p
dev.off()
# computation time
dat_time_w = all_results %>% group_by(n) %>%
summarise(time = mean(time_wald)) %>% mutate(method = "Wald confidence intervals")
dat_time_p = all_results %>% group_by(n) %>%
summarise(time = mean(time_p)) %>% mutate(method = "bootstrap percentile intervals")
dat_time_t = all_results %>% group_by(n) %>%
summarise(time = mean(time_t)) %>% mutate(method = "bootstrap t intervals")
dat_time = rbind(dat_time_w, dat_time_p, dat_time_t)
View(dat_time)
write.csv(dat_time, here::here("results","cimputation_time.csv"), row.names = F)
# distribution of se
p = ggplot(all_results, aes(x = std.error, color = factor(n))) +
geom_density(linewidth = 1) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Standard Error", y = "Density", color = "Sample Size (n)") +
theme(text = element_text(size = 20), legend.position = "bottom")
p
# distribution of se
p = ggplot(all_results, aes(x = std.error, color = factor(n))) +
geom_density(linewidth = 1) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x)),
scales = "free_y") +
labs(x = "Standard Error", y = "Density", color = "Sample Size (n)") +
theme(text = element_text(size = 20), legend.position = "bottom")
p
png(here::here("results","figure_for_se.png"), width = 720, height = 540)
p
dev.off()
install.packages("activegp")
