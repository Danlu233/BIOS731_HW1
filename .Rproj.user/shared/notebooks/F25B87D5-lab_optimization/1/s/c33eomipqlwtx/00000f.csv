"0","# x0: Initial guess for the solution"
"0","# alpha: Step size value"
"0","# tol: Tolerance for stopping criterion"
"0","# max_iter: Maximum number of iterations"
"0","steepest_descent = function(x0, alpha, tol = 1e-6, max_iter = 100) {"
"0",""
"0","  x = x0"
"0","  "
"0","  x_history = gradient_vec = rep(NA, length.out = max_iter)"
"0","  for (iter in 1:max_iter) {"
"0","    "
"0","    # store results"
"0","    x_history[iter] = x"
"0","    "
"0","    "
"0","    # Compute the gradient"
"0","    gradient = 2 * x-100 + exp(x)/50"
"0","    gradient_vec[iter] = gradient"
"0","    "
"0","    # Check stopping criterion"
"0","    if(sqrt(sum(gradient^2)) < tol){"
"0","      message(""Converged in"", iter, ""iterations.\n"")"
"0","      break"
"0","    }"
"0","    "
"0","    # Update the solution"
"0","    x = x - alpha * gradient"
"0","    "
"0",""
"0",""
"0","  }"
"0","  "
"0","  return(list(solution = x, "
"0","              x_history = x_history,"
"0","              gradient = gradient_vec,"
"0","              converged = (iter < max_iter),"
"0","              niter = iter))"
"0","}"
